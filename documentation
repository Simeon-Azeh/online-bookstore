Online Bookstore with Shopping Cart - Project Documentation
1. Project Proposal
1.1 Problem Description
The modern digital marketplace has transformed how consumers purchase books, with online bookstores becoming the preferred method for book discovery and acquisition. However, many existing solutions lack proper object-oriented design principles and efficient data management systems. This project addresses the need for a well-structured, scalable online bookstore simulation that demonstrates proper OOP implementation in JavaScript while providing a seamless user experience for browsing, selecting, and purchasing books.
Key Problems Addressed:
Need for a clean, object-oriented approach to e-commerce systems
Requirement for efficient book inventory management
User session management and shopping cart persistence
Streamlined purchase workflow
Scalable database design for book metadata storage
1.2 Proposed Solution
We propose developing a comprehensive online bookstore simulation using modern JavaScript with object-oriented programming principles. The solution will feature a clean separation of concerns through well-defined classes and a robust backend data layer.
Core Components:
Book Management System: Comprehensive book catalog with search and filtering capabilities
User Management: User registration, authentication, and profile management
Shopping Cart System: Persistent cart functionality with item management
Purchase Processing: Complete checkout workflow with order tracking
Database Integration: MongoDB-based storage for scalable data management
Key Features:
Browse and search book catalog
User registration and authentication
Add/remove books from shopping cart
View cart contents and calculate totals
Complete purchase transactions
Order history and tracking
Admin panel for book management
1.3 Technologies to be Used
Frontend Technologies:
HTML5: Semantic markup and structure
CSS3: Modern styling with responsive design
JavaScript (ES6+): Object-oriented programming with classes
Bootstrap 5: UI framework for responsive design
Backend Technologies:
Node.js: Server-side JavaScript runtime
Express.js: Web application framework
MongoDB: NoSQL database for data storage
Mongoose: ODM for MongoDB integration
Development Tools:
Git: Version control system
npm: Package management
Postman: API testing
MongoDB Compass: Database management GUI
VS Code: Integrated development environment
Additional Libraries:
bcrypt: Password hashing
express-session: Session management
cors: Cross-origin resource sharing
dotenv: Environment variable management
1.4 Project Timeline and Milestones
Phase 1: Project Setup and Planning 
Initialize project repository
Set up development environment
Create project structure
Design database schema
Create UML diagrams
Phase 2: Backend Development
Implement core classes (Book, User, ShoppingCart)
Set up MongoDB connection
Create database models
Implement user authentication
Develop book management APIs
Phase 3: Frontend Development
Create user interface components
Implement book browsing functionality
Develop shopping cart interface
Create user registration/login forms
Implement purchase workflow
Phase 4: Integration and Testing 
Integrate frontend with backend APIs
Perform comprehensive testing
Fix bugs and optimize performance
Implement error handling
Phase 5: Documentation and Deployment 
Complete project documentation
Prepare deployment configuration
Final testing and quality assurance
Project presentation preparation
1.5 Division of Responsibilities
Simeon: Backend Developer
Database design and implementation
Server-side class development
API development and testing
User authentication system
Database integration
Damilare: Frontend Developer
User interface design and implementation
Client-side JavaScript development
Responsive design implementation
User experience optimization
Frontend testing
Team Member 3: Full-Stack Integration
API integration between frontend and backend
Session management implementation
Shopping cart functionality
Purchase workflow implementation
System testing and debugging
Lina: Documentation and Quality Assurance
Project documentation creation
UML diagram development
Testing and quality assurance
Code review and optimization
Deployment preparation

2. Software Documentation
2.1 System Architecture
The Online Bookstore follows a three-tier architecture pattern:
Presentation Layer (Frontend):
HTML/CSS/JavaScript client interface
Responsive web design for multiple devices
Interactive user interface components
Client-side form validation
Business Logic Layer (Backend):
Node.js/Express.js server application
Object-oriented class implementations
API endpoints for data operations
Authentication and session management
Data Access Layer (Database):
MongoDB database for persistent storage
Mongoose ODM for data modeling
Efficient indexing for search operations
Data validation and constraints
2.2 UML Diagrams
2.2.1 Class Diagram
┌─────────────────────┐
│       Book          │
├─────────────────────┤
│ - id: String        │
│ - title: String     │
│ - author: String    │
│ - isbn: String      │
│ - price: Number     │
│ - category: String  │
│ - description: String│
│ - stock: Number     │
│ - imageUrl: String  │
├─────────────────────┤
│ + constructor()     │
│ + getDetails()      │
│ + updateStock()     │
│ + isAvailable()     │
└─────────────────────┘

┌─────────────────────┐
│       User          │
├─────────────────────┤
│ - id: String        │
│ - username: String  │
│ - email: String     │
│ - password: String  │
│ - firstName: String │
│ - lastName: String  │
│ - address: Object   │
│ - createdAt: Date   │
├─────────────────────┤
│ + constructor()     │
│ + authenticate()    │
│ + updateProfile()   │
│ + getFullName()     │
└─────────────────────┘

┌─────────────────────┐
│   ShoppingCart      │
├─────────────────────┤
│ - id: String        │
│ - userId: String    │
│ - items: Array      │
│ - createdAt: Date   │
│ - updatedAt: Date   │
├─────────────────────┤
│ + addItem()         │
│ + removeItem()      │
│ + updateQuantity()  │
│ + calculateTotal()  │
│ + clearCart()       │
│ + getItemCount()    │
└─────────────────────┘

┌─────────────────────┐
│    CartItem         │
├─────────────────────┤
│ - bookId: String    │
│ - quantity: Number  │
│ - price: Number     │
├─────────────────────┤
│ + constructor()     │
│ + getSubtotal()     │
└─────────────────────┘

┌─────────────────────┐
│      Order          │
├─────────────────────┤
│ - id: String        │
│ - userId: String    │
│ - items: Array      │
│ - totalAmount: Number│
│ - status: String    │
│ - orderDate: Date   │
│ - shippingAddress: Object│
├─────────────────────┤
│ + constructor()     │
│ + calculateTotal()  │
│ + updateStatus()    │
│ + getOrderSummary() │
└─────────────────────┘

2.2.2 Use Case Diagram


2.2.3 Detailed Class Relationships
Inheritance Relationships:
No inheritance in this design (composition over inheritance principle)
Association Relationships:
User → ShoppingCart: One-to-One (Each user has one active cart)
User → Order: One-to-Many (Each user can have multiple orders)
ShoppingCart → CartItem: One-to-Many (Cart contains multiple items)
Order → OrderItem: One-to-Many (Order contains multiple items)
CartItem → Book: Many-to-One (Multiple cart items can reference same book)
OrderItem → Book: Many-to-One (Multiple order items can reference same book)
Composition Relationships:
ShoppingCart *-- CartItem: CartItems cannot exist without a ShoppingCart
Order *-- OrderItem: OrderItems cannot exist without an Order
User *-- Address: Address is part of User entity
Key Design Patterns:
Factory Pattern: Used in Order creation with generateOrderNumber()
Strategy Pattern: Different payment methods can be implemented
Observer Pattern: Order status updates can notify interested parties
Repository Pattern: Data access layer abstraction


2.3 API Documentation
2.3.1 Authentication Endpoints
POST /api/auth/register
Description: Register a new user account
Request Body: { username, email, password, firstName, lastName }
Response: { success, message, user }
POST /api/auth/login
Description: Authenticate user login
Request Body: { email, password }
Response: { success, message, user, token }
POST /api/auth/logout
Description: User logout
Response: { success, message }
2.3.2 Book Management Endpoints
GET /api/books
Description: Retrieve all books with optional filtering
Query Parameters: category, author, search, page, limit
Response: { books, totalCount, currentPage }
GET /api/books/:id
Description: Get specific book details
Response: { book }
POST /api/books (Admin only)
Description: Add new book to inventory
Request Body: { title, author, isbn, price, category, description, stock, imageUrl }
Response: { success, message, book }
PUT /api/books/:id (Admin only)
Description: Update book information
Request Body: Book fields to update
Response: { success, message, book }
DELETE /api/books/:id (Admin only)
Description: Remove book from inventory
Response: { success, message }
2.3.3 Shopping Cart Endpoints
GET /api/cart
Description: Get user's shopping cart
Response: { cart, totalAmount, itemCount }
POST /api/cart/add
Description: Add book to cart
Request Body: { bookId, quantity }
Response: { success, message, cart }
PUT /api/cart/update
Description: Update item quantity in cart
Request Body: { bookId, quantity }
Response: { success, message, cart }
DELETE /api/cart/remove/:bookId
Description: Remove item from cart
Response: { success, message, cart }
DELETE /api/cart/clear
Description: Clear entire cart
Response: { success, message }
2.3.4 Order Management Endpoints
POST /api/orders/checkout
Description: Process cart checkout
Request Body: { shippingAddress, paymentMethod }
Response: { success, message, order }
GET /api/orders
Description: Get user's order history
Response: { orders }
GET /api/orders/:id
Description: Get specific order details
Response: { order }
2.4 Database Schema
2.4.1 Books Collection
{
  _id: ObjectId,
  title: String (required),
  author: String (required),
  isbn: String (unique, required),
  price: Number (required, min: 0),
  category: String (required),
  description: String,
  stock: Number (required, min: 0),
  imageUrl: String,
  createdAt: Date (default: Date.now),
  updatedAt: Date (default: Date.now)
}

Indexes:
title (text index for search)
author (index for filtering)
category (index for filtering)
isbn (unique index)
2.4.2 Users Collection
{
  _id: ObjectId,
  username: String (required, unique),
  email: String (required, unique),
  password: String (required, hashed),
  firstName: String (required),
  lastName: String (required),
  address: {
    street: String,
    city: String,
    state: String,
    zipCode: String,
    country: String
  },
  role: String (default: 'customer'),
  createdAt: Date (default: Date.now),
  updatedAt: Date (default: Date.now)
}

Indexes:
email (unique index)
username (unique index)
2.4.3 ShoppingCarts Collection
{
  _id: ObjectId,
  userId: ObjectId (ref: 'User', required),
  items: [{
    bookId: ObjectId (ref: 'Book', required),
    quantity: Number (required, min: 1),
    price: Number (required, min: 0)
  }],
  createdAt: Date (default: Date.now),
  updatedAt: Date (default: Date.now)
}

Indexes:
userId (unique index)
2.4.4 Orders Collection
{
  _id: ObjectId,
  userId: ObjectId (ref: 'User', required),
  orderNumber: String (unique, required),
  items: [{
    bookId: ObjectId (ref: 'Book', required),
    title: String (required),
    author: String (required),
    quantity: Number (required, min: 1),
    price: Number (required, min: 0)
  }],
  totalAmount: Number (required, min: 0),
  status: String (enum: ['pending', 'processing', 'shipped', 'delivered', 'cancelled'], default: 'pending'),
  shippingAddress: {
    street: String (required),
    city: String (required),
    state: String (required),
    zipCode: String (required),
    country: String (required)
  },
  paymentMethod: String (required),
  orderDate: Date (default: Date.now),
  updatedAt: Date (default: Date.now)
}

Indexes:
userId (index for user orders)
orderNumber (unique index)
orderDate (index for date-based queries)
2.5 Setup and Installation Instructions
2.5.1 Prerequisites
Node.js (version 14.x or higher)
MongoDB (version 4.x or higher)
npm (Node Package Manager)
Git
2.5.2 Installation Steps
Clone the Repository

 git clone https://github.com/your-team/online-bookstore.git
cd online-bookstore


Install Dependencies

 npm install


Environment Configuration Create a .env file in the root directory:

 PORT=3000
MONGODB_URI=mongodb://localhost:27017/bookstore
SESSION_SECRET=your-secret-key-here
NODE_ENV=development


Database Setup

 # Start MongoDB service
mongod

# Run database seeding script
npm run seed


Start the Application

 # Development mode
npm run dev

# Production mode
npm start


Access the Application


Frontend: http://localhost:3000
API Documentation: http://localhost:3000/api-docs
2.5.3 Project Structure
online-bookstore/
├── src/
│   ├── models/          # Database models
│   │   ├── Book.js
│   │   ├── User.js
│   │   ├── ShoppingCart.js
│   │   └── Order.js
│   ├── controllers/     # Route controllers
│   │   ├── authController.js
│   │   ├── bookController.js
│   │   ├── cartController.js
│   │   └── orderController.js
│   ├── routes/          # API routes
│   │   ├── auth.js
│   │   ├── books.js
│   │   ├── cart.js
│   │   └── orders.js
│   ├── middleware/      # Custom middleware
│   │   ├── auth.js
│   │   └── validation.js
│   └── utils/           # Utility functions
│       ├── database.js
│       └── helpers.js
├── public/              # Static files
│   ├── css/
│   ├── js/
│   └── images/
├── views/               # HTML templates
├── tests/               # Test files
├── .env.example         # Environment variables template
├── package.json
├── server.js            # Application entry point
└── README.md

2.5.4 Testing
# Run all tests
npm test

# Run specific test suite
npm run test:models
npm run test:api
npm run test:integration

# Generate coverage report
npm run test:coverage

2.5.5 Deployment
Development Deployment:
npm run build
npm start

Production Deployment:
Set environment variables for production
Configure production database
Build the application
Deploy to hosting platform (Heroku, AWS, etc.)
2.5.6 Troubleshooting
Common Issues:
MongoDB Connection Error


Ensure MongoDB is running
Check connection string in .env file
Verify database permissions
Port Already in Use


Change PORT in .env file
Kill existing processes using the port
Module Not Found Errors


Run npm install to install dependencies
Clear npm cache: npm cache clean --force
Session Issues


Verify SESSION_SECRET is set in .env
Clear browser cookies and storage
Support: For additional support, please refer to the project wiki or contact the development team.

